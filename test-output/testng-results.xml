<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="1" total="3" passed="1" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-11-15T07:08:20 IST" name="Suite" finished-at="2024-11-15T07:08:54 IST" duration-ms="34362">
    <groups>
    </groups>
    <test started-at="2024-11-15T07:08:20 IST" name="Test" finished-at="2024-11-15T07:08:54 IST" duration-ms="34362">
      <class name="TestCases.registerTestCases">
        <test-method is-config="true" signature="ExtentReport()[pri:0, instance:TestCases.registerTestCases@399f45b1]" started-at="2024-11-15T07:08:19 IST" name="ExtentReport" finished-at="2024-11-15T07:08:20 IST" duration-ms="629" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentReport -->
        <test-method is-config="true" signature="browserLaunch()[pri:0, instance:TestCases.registerTestCases@399f45b1]" started-at="2024-11-15T07:08:20 IST" name="browserLaunch" finished-at="2024-11-15T07:08:37 IST" duration-ms="17747" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- browserLaunch -->
        <test-method signature="verifyRegsiterationWithBlankData()[pri:0, instance:TestCases.registerTestCases@399f45b1]" started-at="2024-11-15T07:08:37 IST" name="verifyRegsiterationWithBlankData" finished-at="2024-11-15T07:08:41 IST" duration-ms="3348" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
expected [//First Name must be between 1 and 32 characters!] but found [First Name must be between 1 and 32 characters!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
expected [//First Name must be between 1 and 32 characters!] but found [First Name must be between 1 and 32 characters!]
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:47)
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:31)
at Resources.commonMethods.handleAssertion(commonMethods.java:20)
at TestCases.registerTestCases.verifyRegsiterationWithBlankData(registerTestCases.java:54)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegsiterationWithBlankData -->
        <test-method is-config="true" signature="browserClose()[pri:0, instance:TestCases.registerTestCases@399f45b1]" started-at="2024-11-15T07:08:41 IST" name="browserClose" finished-at="2024-11-15T07:08:42 IST" duration-ms="494" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- browserClose -->
        <test-method is-config="true" signature="browserLaunch()[pri:0, instance:TestCases.registerTestCases@399f45b1]" started-at="2024-11-15T07:08:42 IST" name="browserLaunch" finished-at="2024-11-15T07:08:46 IST" duration-ms="4770" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- browserLaunch -->
        <test-method signature="verifyRegsiterationWithValidData()[pri:0, instance:TestCases.registerTestCases@399f45b1]" started-at="2024-11-15T07:08:46 IST" name="verifyRegsiterationWithValidData" finished-at="2024-11-15T07:08:54 IST" duration-ms="7142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegsiterationWithValidData -->
        <test-method is-config="true" signature="browserClose()[pri:0, instance:TestCases.registerTestCases@399f45b1]" started-at="2024-11-15T07:08:54 IST" name="browserClose" finished-at="2024-11-15T07:08:54 IST" duration-ms="478" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- browserClose -->
        <test-method is-config="true" signature="endReport()[pri:0, instance:TestCases.registerTestCases@399f45b1]" started-at="2024-11-15T07:08:54 IST" name="endReport" finished-at="2024-11-15T07:08:55 IST" duration-ms="704" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
      </class> <!-- TestCases.registerTestCases -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
